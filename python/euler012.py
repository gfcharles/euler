"""
The sequence of triangle numbers is generated by adding the natural numbers.
So the 7^(th) triangle number would be 1 + 2 + 3 + 4 + 5 + 6 + 7 = 28. The first ten terms would be:

1, 3, 6, 10, 15, 21, 28, 36, 45, 55, ...

Let us list the factors of the first seven triangle numbers:

     1: 1
     3: 1,3
     6: 1,2,3,6
    10: 1,2,5,10
    15: 1,3,5,15
    21: 1,3,7,21
    28: 1,2,4,7,14,28

We can see that 28 is the first triangle number to have over five divisors.

What is the value of the first triangle number to have over five hundred divisors?
"""
from typing import Generator

from common.euler_lib import count_factors
from euler import euler_problem


@euler_problem()
def euler012(n: int | str) -> int:
    return next(filter(lambda t_num: count_factors(t_num) > int(n), triangle_num_gen()))


def triangle_num_gen() -> Generator[int, None, None]:
    counter = 0
    triangle = 0

    while True:
        counter += 1
        triangle += counter
        yield triangle


if __name__ == '__main__':
    print(euler012(5))
    print(euler012(500))
