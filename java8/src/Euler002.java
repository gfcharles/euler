import com.protonpack.StreamUtils;
import framework.EulerProblem;
import util.FibonacciSupplier;
import util.IntegerUtils;

import java.util.stream.LongStream;
import java.util.stream.Stream;

/**
 * Each new term in the FibonacciSupplier sequence is generated by adding the previous two terms. By starting
 * with 1 and 2, the first 10 terms will be: 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, ...
 *
 * By considering the terms in the FibonacciSupplier sequence whose values do not exceed four million, find the
 * sum of the even-valued terms.
 *
 * Created by gcharles on 8/17/16.
 */
public class Euler002 extends EulerProblem<Integer> {

//    @Override
//    public long solve( Integer input ) {
//        FibonacciSupplier fib = new FibonacciSupplier(1, 2);
//        return LongStream.generate( fib )
//                .limit(35)
//                .filter(n -> n <= input)
//                .filter(n -> n % 2 == 0)
//                .sum();
//    }

    @Override
    public long solve( Integer input ) {
        // Solution using com.protonpack library: https://github.com/poetix/protonpack
        Stream<Long> infinite = LongStream.generate(new FibonacciSupplier(1, 2)).mapToObj(l -> l);
        LongStream finite = StreamUtils.takeUntil(infinite, l -> l > input).mapToLong(l -> l);

        return finite
                .filter(IntegerUtils::even)
                .sum();
    }
}